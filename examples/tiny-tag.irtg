/* A tiny TAG grammar, automatically converted from a small fragment
   of XTAG.

   The grammar can parse "the businessman sleeps" and "the happy
   businessman sleeps", or decode them into derived trees.
*/


interpretation tree: de.up.ling.irtg.algebra.TagTreeAlgebra
interpretation string: de.up.ling.irtg.algebra.TagStringAlgebra

S_S! -> inx0V-sleep(NP_S, V_A, VP_A, S_A) [1.0]
  [tree] @(?4, S2(?1, @(?3, VP1(@(?2, V0(sleeps))))))
  [string] *WRAP21*(?4, *CONC11*(?1, *WRAP21*(?3, *WRAP21*(?2, sleeps))))

NP_S -> iNXN-businessman(N_A, NP_A)  [1.0]
  [tree] @(?2, NP1(@(?1, N0(businessman))))
  [string] *WRAP21*(?2, *WRAP21*(?1, businessman))

NP_A -> aDnx-the(D_A, NP_A)  [1.0]
  [tree] @(?2, NP2(@(?1, D0(the)), *))
  [string] *WRAP22*(?2, *CONC12*(*WRAP21*(?1, the), *EE*))

N_A -> aAn-happy(A_A, N_A)  [1.0]
  [tree] @(?2, N2(@(?1, A0(happy)), *))
  [string] *WRAP22*(?2, *CONC12*(*WRAP21*(?1, happy), *EE*))

NP_A -> *NOP*  [1.0]
  [tree] *
  [string] *EE*

N_A -> *NOP* [1.0]
  [tree] *
  [string] *EE*

VP_A -> *NOP* [1.0]
  [tree] *
  [string] *EE*

V_A -> *NOP* [1.0]
  [tree] *
  [string] *EE*

S_A -> *NOP* [1.0]
  [tree] *
  [string] *EE*

D_A -> *NOP* [1.0]
  [tree] *
  [string] *EE*

A_A -> *NOP* [1.0]
  [tree] *
  [string] *EE*



