/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
  STATIC = false;
  LOOKAHEAD=2;
  FORCE_LA_CHECK=true;
}
PARSER_BEGIN(TreeAutomatonParser)
package de.saar.penguin.irtg.automata;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.*;
import java.io.*;

/**
 * Parser for bottom-up automata
 * @author Alexander Koller
 */
public class TreeAutomatonParser {
    private static ConcreteTreeAutomaton<String> automaton;
    private static TreeAutomatonParser parser = new TreeAutomatonParser(new ByteArrayInputStream(new byte[]{}));
    private static Rule<String> lastSeenRule = null;

	public static TreeAutomaton<String> parse(Reader reader) throws ParseException{
		parser.ReInit(reader);
		automaton = new ConcreteTreeAutomaton<String>();
                lastSeenRule = null;

		parser.automaton();
		return automaton;
	}
}
PARSER_END(TreeAutomatonParser)

SKIP : { <"/*">: INSIDE_COMMENT | " " | "\t" | "\n" }
<INSIDE_COMMENT>
SKIP: { <"*/">: DEFAULT | <~[]> }

TOKEN :
{
    < NAME:     ["a"-"z","A"-"Z","_", "*", "$", "@", "+"] (["a"-"z","A"-"Z","_", "<", ">", "+", "-", "0"-"9", "@", "/", "*", ".", "$"] )* > |
    <QUOTED_NAME: "\'" (~["\'"])* "\'"> |
    <NUMBER : ["0"-"9", "."] (["0"-"9", ".", "e", "E", "-"])* > |
    < FIN_MARK: [ "\u00b0", "!"] > 
   // < NEUTRAL_MARK: ["%"] > |
  //  <LINE_END_COMMENT: "//" (~["\n"])* >
}

void automaton() :
{
}
{
		automatonRule() (Weight())? 
		( 
				 LOOKAHEAD(2) automatonRule() (Weight())? 
		)*

}


void automatonRule() :
{
    String label = null;
    List<String> childStates = null;
    String parentState = null;
}
{
    parentState=State() "->" label=name() ("(" childStates=StateList() ")")? {
        if( childStates == null ) childStates = new ArrayList<String>();
        lastSeenRule = automaton.addRule(label.intern(), childStates, parentState);
    }
}

List<String> StateList() :
{
  List<String> ret = new ArrayList<String>();
  String x;
}
{
   (x = State() { ret.add(x); } ("," x = State() { ret.add(x); })*  ) { return ret; }
}

String State() :
{
  String state, internedState;
  String fin_mark = null;
}
{
  state = name() (fin_mark = <FIN_MARK>.image)* {
    internedState = state.intern();
    if( fin_mark != null ) {
      automaton.addFinalState(internedState);
    }

    return internedState;
  }
}


String name() :
{
    Token tok;
}
{
    tok = <NAME> { return tok.image.intern(); }
    | tok = <QUOTED_NAME> { return tok.image.substring(1, tok.image.length()-1).intern(); }
}



void Weight() :
{
    String num = null;
}
{
    "[" num=<NUMBER>.image "]" {
        lastSeenRule.setWeight(Double.parseDouble(num));
    }
}